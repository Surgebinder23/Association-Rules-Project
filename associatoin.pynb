{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6352d219-28be-4a0e-9159-9f43a827dc43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: mlxtend in c:\\users\\jcald\\anaconda3\\lib\\site-packages (0.19.0)\n",
      "Requirement already satisfied: scikit-learn>=0.20.3 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from mlxtend) (0.24.2)\n",
      "Requirement already satisfied: setuptools in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from mlxtend) (58.0.4)\n",
      "Requirement already satisfied: matplotlib>=3.0.0 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from mlxtend) (3.4.3)\n",
      "Requirement already satisfied: scipy>=1.2.1 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from mlxtend) (1.7.1)\n",
      "Requirement already satisfied: numpy>=1.16.2 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from mlxtend) (1.20.3)\n",
      "Requirement already satisfied: joblib>=0.13.2 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from mlxtend) (1.1.0)\n",
      "Requirement already satisfied: pandas>=0.24.2 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from mlxtend) (1.3.4)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from matplotlib>=3.0.0->mlxtend) (0.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from matplotlib>=3.0.0->mlxtend) (1.3.1)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from matplotlib>=3.0.0->mlxtend) (3.0.4)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from matplotlib>=3.0.0->mlxtend) (2.8.2)\n",
      "Requirement already satisfied: pillow>=6.2.0 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from matplotlib>=3.0.0->mlxtend) (8.4.0)\n",
      "Requirement already satisfied: six in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from cycler>=0.10->matplotlib>=3.0.0->mlxtend) (1.16.0)\n",
      "Requirement already satisfied: pytz>=2017.3 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from pandas>=0.24.2->mlxtend) (2021.3)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\jcald\\anaconda3\\lib\\site-packages (from scikit-learn>=0.20.3->mlxtend) (2.2.0)\n",
      "Requirement already satisfied: efficient-apriori in c:\\users\\jcald\\anaconda3\\lib\\site-packages (2.0.1)\n",
      "Requirement already satisfied: apyori in c:\\users\\jcald\\anaconda3\\lib\\site-packages (1.1.2)\n"
     ]
    }
   ],
   "source": [
    "!pip install mlxtend\n",
    "!pip install efficient-apriori\n",
    "!pip install apyori  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f6dbae4f-0839-4b1c-b775-7816c87914d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mlxtend\n",
    "from mlxtend.frequent_patterns import association_rules\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from mlxtend.frequent_patterns import apriori\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4c8bc14d-c3c3-4b76-9e9f-0b1ff4b79f20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mlxtend version 0.19.0\n",
      "efficient_apriori version 0.19.0\n"
     ]
    }
   ],
   "source": [
    "print('mlxtend version',mlxtend.__version__)\n",
    "print('efficient_apriori version',mlxtend.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8f0bedc0-c8bb-4ff8-bc15-5add4e14f081",
   "metadata": {},
   "outputs": [],
   "source": [
    "ct = pd.read_csv('Data/CampusTransactions.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e46b90d3-343f-48d9-b3de-b225e7614a68",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Transaction Purchased  Quantity\n",
      "0            1     Shirt         1\n",
      "1            2     Shirt         1\n",
      "2            4      Pens         1\n",
      "3            2       Mug         1\n",
      "4            6      Pens         1\n"
     ]
    }
   ],
   "source": [
    "print(ct.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dffeed28-e307-44fb-abc4-7c63a697656a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 29 entries, 0 to 28\n",
      "Data columns (total 3 columns):\n",
      " #   Column       Non-Null Count  Dtype \n",
      "---  ------       --------------  ----- \n",
      " 0   Transaction  29 non-null     int64 \n",
      " 1   Purchased    29 non-null     object\n",
      " 2   Quantity     29 non-null     int64 \n",
      "dtypes: int64(2), object(1)\n",
      "memory usage: 824.0+ bytes\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(ct.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bf54bb57-10ad-45cb-988f-1e2291e29afe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([], dtype='object')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ct.columns[ct.isnull().any()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1c630567-e8d8-4a1a-8715-3af55ff3441c",
   "metadata": {},
   "outputs": [],
   "source": [
    "ctP = ct.pivot_table('Quantity', ['Transaction'], 'Purchased').fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8366d928-8931-4a80-9c72-8e843a1bf291",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Purchased    Cap  Folder  Mug  Notebook  Pencils  Pens  Shirt  Sweater  USB\n",
      "Transaction                                                                \n",
      "1            1.0     0.0  1.0       0.0      0.0   0.0    1.0      1.0  0.0\n",
      "2            1.0     1.0  1.0       0.0      0.0   0.0    1.0      0.0  1.0\n",
      "3            0.0     0.0  0.0       0.0      1.0   1.0    1.0      0.0  1.0\n",
      "4            0.0     0.0  1.0       0.0      1.0   1.0    0.0      0.0  0.0\n",
      "5            1.0     0.0  0.0       0.0      0.0   0.0    0.0      1.0  0.0\n",
      "6            1.0     0.0  0.0       0.0      1.0   1.0    0.0      0.0  1.0\n",
      "7            0.0     0.0  0.0       0.0      1.0   1.0    0.0      1.0  1.0\n",
      "8            0.0     0.0  0.0       1.0      1.0   0.0    0.0      0.0  1.0\n"
     ]
    }
   ],
   "source": [
    "print(ctP)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "23066b9e-8a80-4046-9e12-0557aba25e45",
   "metadata": {},
   "outputs": [],
   "source": [
    "ctP = ctP.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7ae9b63d-e3d7-4320-a52e-c6b6e81ff959",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Purchased    Cap  Folder  Mug  Notebook  Pencils  Pens  Shirt  Sweater  USB\n",
      "Transaction                                                                \n",
      "1              1       0    1         0        0     0      1        1    0\n",
      "2              1       1    1         0        0     0      1        0    1\n",
      "3              0       0    0         0        1     1      1        0    1\n",
      "4              0       0    1         0        1     1      0        0    0\n",
      "5              1       0    0         0        0     0      0        1    0\n",
      "6              1       0    0         0        1     1      0        0    1\n",
      "7              0       0    0         0        1     1      0        1    1\n",
      "8              0       0    0         1        1     0      0        0    1\n"
     ]
    }
   ],
   "source": [
    "print(ctP)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4b7abbbe-e657-48c7-b280-d28b189832c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "ctP_is = apriori(ctP, min_support = 0.2, use_colnames = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8f06f764-470b-4c98-92d2-633153d4d57f",
   "metadata": {},
   "outputs": [],
   "source": [
    "ctP_final = association_rules(ctP_is, metric = \"confidence\", min_threshold = 0.66)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "86aa325f-ef68-49f5-9837-2656bdd3ad64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>antecedents</th>\n",
       "      <th>consequents</th>\n",
       "      <th>antecedent support</th>\n",
       "      <th>consequent support</th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lift</th>\n",
       "      <th>leverage</th>\n",
       "      <th>conviction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Mug)</td>\n",
       "      <td>(Cap)</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.062500</td>\n",
       "      <td>1.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(Shirt)</td>\n",
       "      <td>(Cap)</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.062500</td>\n",
       "      <td>1.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(Sweater)</td>\n",
       "      <td>(Cap)</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>0.062500</td>\n",
       "      <td>1.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(Shirt)</td>\n",
       "      <td>(Mug)</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.777778</td>\n",
       "      <td>0.109375</td>\n",
       "      <td>1.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>(Mug)</td>\n",
       "      <td>(Shirt)</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.777778</td>\n",
       "      <td>0.109375</td>\n",
       "      <td>1.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>(Pens)</td>\n",
       "      <td>(Pencils)</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.500</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.187500</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>(Pencils)</td>\n",
       "      <td>(Pens)</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.187500</td>\n",
       "      <td>2.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>(Pencils)</td>\n",
       "      <td>(USB)</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1.280000</td>\n",
       "      <td>0.109375</td>\n",
       "      <td>1.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>(USB)</td>\n",
       "      <td>(Pencils)</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>1.280000</td>\n",
       "      <td>0.109375</td>\n",
       "      <td>1.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>(Pens)</td>\n",
       "      <td>(USB)</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>1.200000</td>\n",
       "      <td>0.062500</td>\n",
       "      <td>1.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>(Shirt)</td>\n",
       "      <td>(USB)</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.066667</td>\n",
       "      <td>0.015625</td>\n",
       "      <td>1.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>(Cap, Shirt)</td>\n",
       "      <td>(Mug)</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.250</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.156250</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>(Cap, Mug)</td>\n",
       "      <td>(Shirt)</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.250</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.156250</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>(Shirt, Mug)</td>\n",
       "      <td>(Cap)</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.250</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>(Shirt)</td>\n",
       "      <td>(Cap, Mug)</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.156250</td>\n",
       "      <td>2.250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>(Mug)</td>\n",
       "      <td>(Cap, Shirt)</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.156250</td>\n",
       "      <td>2.250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>(Pens, Pencils)</td>\n",
       "      <td>(USB)</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>1.200000</td>\n",
       "      <td>0.062500</td>\n",
       "      <td>1.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>(Pens, USB)</td>\n",
       "      <td>(Pencils)</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.375</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.140625</td>\n",
       "      <td>inf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>(USB, Pencils)</td>\n",
       "      <td>(Pens)</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>2.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>(Pens)</td>\n",
       "      <td>(USB, Pencils)</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>2.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        antecedents     consequents  antecedent support  consequent support  \\\n",
       "0             (Mug)           (Cap)               0.375               0.500   \n",
       "1           (Shirt)           (Cap)               0.375               0.500   \n",
       "2         (Sweater)           (Cap)               0.375               0.500   \n",
       "3           (Shirt)           (Mug)               0.375               0.375   \n",
       "4             (Mug)         (Shirt)               0.375               0.375   \n",
       "5            (Pens)       (Pencils)               0.500               0.625   \n",
       "6         (Pencils)          (Pens)               0.625               0.500   \n",
       "7         (Pencils)           (USB)               0.625               0.625   \n",
       "8             (USB)       (Pencils)               0.625               0.625   \n",
       "9            (Pens)           (USB)               0.500               0.625   \n",
       "10          (Shirt)           (USB)               0.375               0.625   \n",
       "11     (Cap, Shirt)           (Mug)               0.250               0.375   \n",
       "12       (Cap, Mug)         (Shirt)               0.250               0.375   \n",
       "13     (Shirt, Mug)           (Cap)               0.250               0.500   \n",
       "14          (Shirt)      (Cap, Mug)               0.375               0.250   \n",
       "15            (Mug)    (Cap, Shirt)               0.375               0.250   \n",
       "16  (Pens, Pencils)           (USB)               0.500               0.625   \n",
       "17      (Pens, USB)       (Pencils)               0.375               0.625   \n",
       "18   (USB, Pencils)          (Pens)               0.500               0.500   \n",
       "19           (Pens)  (USB, Pencils)               0.500               0.500   \n",
       "\n",
       "    support  confidence      lift  leverage  conviction  \n",
       "0     0.250    0.666667  1.333333  0.062500       1.500  \n",
       "1     0.250    0.666667  1.333333  0.062500       1.500  \n",
       "2     0.250    0.666667  1.333333  0.062500       1.500  \n",
       "3     0.250    0.666667  1.777778  0.109375       1.875  \n",
       "4     0.250    0.666667  1.777778  0.109375       1.875  \n",
       "5     0.500    1.000000  1.600000  0.187500         inf  \n",
       "6     0.500    0.800000  1.600000  0.187500       2.500  \n",
       "7     0.500    0.800000  1.280000  0.109375       1.875  \n",
       "8     0.500    0.800000  1.280000  0.109375       1.875  \n",
       "9     0.375    0.750000  1.200000  0.062500       1.500  \n",
       "10    0.250    0.666667  1.066667  0.015625       1.125  \n",
       "11    0.250    1.000000  2.666667  0.156250         inf  \n",
       "12    0.250    1.000000  2.666667  0.156250         inf  \n",
       "13    0.250    1.000000  2.000000  0.125000         inf  \n",
       "14    0.250    0.666667  2.666667  0.156250       2.250  \n",
       "15    0.250    0.666667  2.666667  0.156250       2.250  \n",
       "16    0.375    0.750000  1.200000  0.062500       1.500  \n",
       "17    0.375    1.000000  1.600000  0.140625         inf  \n",
       "18    0.375    0.750000  1.500000  0.125000       2.000  \n",
       "19    0.375    0.750000  1.500000  0.125000       2.000  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ctP_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "db23a578-be5c-4b9d-aeb5-d0a55e5c26df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>antecedents</th>\n",
       "      <th>consequents</th>\n",
       "      <th>antecedent support</th>\n",
       "      <th>consequent support</th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lift</th>\n",
       "      <th>leverage</th>\n",
       "      <th>conviction</th>\n",
       "      <th>antecedent_len</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>(Pens)</td>\n",
       "      <td>(Pencils)</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.500</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.187500</td>\n",
       "      <td>inf</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>(Pens, USB)</td>\n",
       "      <td>(Pencils)</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0.375</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.140625</td>\n",
       "      <td>inf</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    antecedents consequents  antecedent support  consequent support  support  \\\n",
       "5        (Pens)   (Pencils)               0.500               0.625    0.500   \n",
       "17  (Pens, USB)   (Pencils)               0.375               0.625    0.375   \n",
       "\n",
       "    confidence  lift  leverage  conviction  antecedent_len  \n",
       "5          1.0   1.6  0.187500         inf               1  \n",
       "17         1.0   1.6  0.140625         inf               2  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ctP_final [\"antecedent_len\"] = ctP_final [\"antecedents\"].apply(lambda x: len(x))\n",
    "ctP_final[ (ctP_final [\"antecedent_len\"] >= 1) &\n",
    "          (ctP_final [\"confidence\"] > 0.99) &\n",
    "          (ctP_final [\"support\"] > .3) ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8f5409ec-a8d6-482b-ba51-0441137e5f23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     1\n",
       "1     1\n",
       "2     1\n",
       "3     1\n",
       "4     1\n",
       "5     1\n",
       "6     1\n",
       "7     1\n",
       "8     1\n",
       "9     1\n",
       "10    1\n",
       "11    2\n",
       "12    2\n",
       "13    2\n",
       "14    1\n",
       "15    1\n",
       "16    2\n",
       "17    2\n",
       "18    2\n",
       "19    1\n",
       "Name: antecedent_len, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ctP_final[\"antecedent_len\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89dd0929-9223-42d2-87f3-7edcb57bc1d6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
